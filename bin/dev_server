#!/usr/bin/env python
import argparse
import os
import sys

MDWEB_BASE_DIR = os.path.abspath(os.path.join(__file__, os.pardir, os.pardir))

# We're starting in a subdirectory of the project, we need to add the
# project base directory to the python path
sys.path.insert(1, MDWEB_BASE_DIR)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Development Server Help')
    parser.add_argument("-d", "--debug", action="store_true", dest="debug_mode",
                        help="run in debug mode (for use with PyCharm)",
                        default=False)
    parser.add_argument("-p", "--port", dest="port",
                        help="port of server (default:%(default)s)", type=int,
                        default=5000)
    parser.add_argument("-n", "--name", dest="name",
                        help="application name", type=str,
                        default="MDWeb")
    parser.add_argument("-l", "--list-sites", dest="list", action="store_true",
                        help="list available applications")
    parser.add_argument("--log-level", dest="log_level", type=str,
                        help="logging level ('CRITICAL', 'ERROR, 'WARNING',"
                        "'INFO', 'DEBUG', 'NOTSET')", default="ERROR")
    parser.add_argument('site', help='site class')

    cmd_args = parser.parse_args()

    # Print the available sites
    if cmd_args.list:
        import pkgutil
        sites_path = os.path.abspath(os.path.join(MDWEB_BASE_DIR, 'sites'))
        for _, name, __ in pkgutil.iter_modules([sites_path]):
            print("  - %s" % name)
    else:
        site_module = __import__("sites.%s" % cmd_args.site)
        site_module = getattr(site_module, cmd_args.site)
        site_class = getattr(site_module, cmd_args.site)

        # Options that can be passed to the Flask application.
        # These are currently set to defaults but are defined here for
        # potential future use with argument options.
        app_options = {
            'static_path': None,
            'static_url_path': None,
            'static_folder': 'static',
            'template_folder': 'templates',
            'instance_path': None,
            'instance_relative_config': False,
        }

        # Options specific to MDWeb sites (not Flask app options)
        site_options = {
            'logging_level': cmd_args.log_level,
        }

        site = site_class(
            # Site name, this gets passed in as the Flask name
            cmd_args.name,
            # Flask options that will be passed through to the Flask()
            # constructor
            app_options=app_options,
            # MDWeb site options
            site_options=site_options
        )

        site.start()

        site.run()

        # run_options = {}
        # if cmd_args.debug_mode:
        #     run_options["debug"] = True
        #     run_options["use_debugger"] = False
        #     run_options["use_reloader"] = False
        # site.run(**run_options)





